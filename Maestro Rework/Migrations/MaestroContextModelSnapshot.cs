// <auto-generated />
using Maestro_Rework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Maestro_Rework.Migrations
{
    [DbContext(typeof(MaestroContext))]
    partial class MaestroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Maestro_Rework.Classes.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Correta");

                    b.Property<int>("QuestaoID");

                    b.Property<string>("Texto");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoID");

                    b.ToTable("Alternativas");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.AlternativaCorreta", b =>
                {
                    b.Property<int>("QuestionarioUsuarioID");

                    b.Property<int>("AlternativaID");

                    b.Property<int>("Tentativa");

                    b.HasKey("QuestionarioUsuarioID", "AlternativaID");

                    b.ToTable("AlternativaCorretas");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.AnexoConteudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Anexo");

                    b.Property<int>("ConteudoID");

                    b.Property<byte[]>("Imagem");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("ConteudoID");

                    b.ToTable("AnexoConteudos");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Conteudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CodigoAcesso");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime?>("DataFim");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<string>("Nome");

                    b.Property<string>("Tema");

                    b.Property<string>("Texto");

                    b.Property<int>("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Conteudos");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Imagem");

                    b.Property<string>("Pergunta");

                    b.Property<int>("QuestionarioID");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("QuestionarioID");

                    b.ToTable("Questoes");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Questionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CodigoAcesso");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime?>("DataFim");

                    b.Property<DateTime?>("DataInicio");

                    b.Property<string>("Nome");

                    b.Property<bool>("Refazer");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Questionarios");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.QuestionarioUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Acesso");

                    b.Property<int>("QuestionarioID");

                    b.Property<bool>("Refez");

                    b.Property<int>("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("QuestionarioID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("QuestionarioUsuarios");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistraQuestionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAtualizacao");

                    b.Property<int>("QuestionarioID");

                    b.HasKey("Id");

                    b.HasIndex("QuestionarioID");

                    b.ToTable("RegistroQuestionarios");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistroConteudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConteudoID");

                    b.Property<DateTime>("DataAtualizacao");

                    b.HasKey("Id");

                    b.HasIndex("ConteudoID");

                    b.ToTable("RegistroConteudos");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistroUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEntrada");

                    b.Property<DateTime>("DataSaida");

                    b.Property<string>("IpDaMaquina");

                    b.Property<int>("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioID");

                    b.ToTable("RegistroUsuarios");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Cargo");

                    b.Property<string>("CodigoSenha");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<int>("Nivel");

                    b.Property<string>("Nome");

                    b.Property<string>("Senha");

                    b.Property<bool>("Verificado");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.UsuarioConteudo", b =>
                {
                    b.Property<int>("UsuarioID");

                    b.Property<int>("ConteudoID");

                    b.Property<bool>("Acesso");

                    b.HasKey("UsuarioID", "ConteudoID");

                    b.HasIndex("ConteudoID");

                    b.ToTable("UsuarioConteudos");
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Alternativa", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.AlternativaCorreta", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.QuestionarioUsuario", "QuestionarioUsuario")
                        .WithMany("AlternativaCorretas")
                        .HasForeignKey("QuestionarioUsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.AnexoConteudo", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Conteudo", "Conteudo")
                        .WithMany("Anexos")
                        .HasForeignKey("ConteudoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Conteudo", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Questao", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Questionario", "Questionario")
                        .WithMany("Questoes")
                        .HasForeignKey("QuestionarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.Questionario", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.QuestionarioUsuario", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Questionario", "Questionario")
                        .WithMany()
                        .HasForeignKey("QuestionarioID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Maestro_Rework.Classes.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistraQuestionario", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Questionario", "Questionario")
                        .WithMany("Registro")
                        .HasForeignKey("QuestionarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistroConteudo", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Conteudo", "Conteudo")
                        .WithMany("Registros")
                        .HasForeignKey("ConteudoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.RegistroUsuario", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Usuario", "Usuario")
                        .WithMany("Registros")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Maestro_Rework.Classes.UsuarioConteudo", b =>
                {
                    b.HasOne("Maestro_Rework.Classes.Conteudo", "Conteudo")
                        .WithMany("Usuarios")
                        .HasForeignKey("ConteudoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Maestro_Rework.Classes.Usuario", "Usuario")
                        .WithMany("Conteudos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
